{"meta":{"title":"ZhouXu'Blog","subtitle":null,"description":"NEVER GIVE UP;","author":"zhouxu","url":"https://zhouxu2016.github.io"},"pages":[{"title":"about","date":"2017-11-06T13:36:50.000Z","updated":"2017-11-09T10:39:15.985Z","comments":false,"path":"about/index.html","permalink":"https://zhouxu2016.github.io/about/index.html","excerpt":"","text":"职业: Java开发方向: 互联网金融"},{"title":"Tags","date":"2017-11-09T08:32:27.905Z","updated":"2017-11-09T08:32:27.905Z","comments":false,"path":"tags/index.html","permalink":"https://zhouxu2016.github.io/tags/index.html","excerpt":"","text":""},{"title":"Categories","date":"2017-11-09T08:32:40.635Z","updated":"2017-11-09T08:32:40.635Z","comments":false,"path":"categories/index.html","permalink":"https://zhouxu2016.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"高性能JSON框架之FastJson的简单使用","slug":"FastJsonDemo","date":"2017-11-03T13:43:01.975Z","updated":"2017-11-09T10:37:13.455Z","comments":true,"path":"2017/11/03/FastJsonDemo/","link":"","permalink":"https://zhouxu2016.github.io/2017/11/03/FastJsonDemo/","excerpt":"前言FastJson的介绍:JSON协议使用方便，越来越流行,JSON的处理器有很多,这里我介绍一下FastJson,FastJson是阿里的开源框架,被不少企业使用,是一个极其优秀的Json框架,Github地址: FastJson FastJson的特点:1.FastJson数度快,无论序列化和反序列化,都是当之无愧的fast2.功能强大(支持普通JDK类包括任意Java Bean Class、Collection、Map、Date或enum)3.零依赖(没有依赖其它任何类库) FastJson的简单说明:FastJson对于json格式字符串的解析主要用到了一下三个类：1.JSON：fastJson的解析器，用于JSON格式字符串与JSON对象及javaBean之间的转换2.JSONObject：fastJson提供的json对象3.JSONArray：fastJson提供json数组对象 还在迷茫和彷徨吗,快上车,老司机带你飞!","text":"前言FastJson的介绍:JSON协议使用方便，越来越流行,JSON的处理器有很多,这里我介绍一下FastJson,FastJson是阿里的开源框架,被不少企业使用,是一个极其优秀的Json框架,Github地址: FastJson FastJson的特点:1.FastJson数度快,无论序列化和反序列化,都是当之无愧的fast2.功能强大(支持普通JDK类包括任意Java Bean Class、Collection、Map、Date或enum)3.零依赖(没有依赖其它任何类库) FastJson的简单说明:FastJson对于json格式字符串的解析主要用到了一下三个类：1.JSON：fastJson的解析器，用于JSON格式字符串与JSON对象及javaBean之间的转换2.JSONObject：fastJson提供的json对象3.JSONArray：fastJson提供json数组对象 还在迷茫和彷徨吗,快上车,老司机带你飞! FastJson的用法首先定义三个json格式的字符串 12345678//json字符串-简单对象型private static final String JSON_OBJ_STR = \"&#123;\\\"studentName\\\":\\\"lily\\\",\\\"studentAge\\\":12&#125;\";//json字符串-数组类型private static final String JSON_ARRAY_STR = \"[&#123;\\\"studentName\\\":\\\"lily\\\",\\\"studentAge\\\":12&#125;,&#123;\\\"studentName\\\":\\\"lucy\\\",\\\"studentAge\\\":15&#125;]\";//复杂格式json字符串private static final String COMPLEX_JSON_STR = \"&#123;\\\"teacherName\\\":\\\"crystall\\\",\\\"teacherAge\\\":27,\\\"course\\\":&#123;\\\"courseName\\\":\\\"english\\\",\\\"code\\\":1270&#125;,\\\"students\\\":[&#123;\\\"studentName\\\":\\\"lily\\\",\\\"studentAge\\\":12&#125;,&#123;\\\"studentName\\\":\\\"lucy\\\",\\\"studentAge\\\":15&#125;]&#125;\"; JSON格式字符串与JSON对象之间的转换json字符串-简单对象型与JSONObject之间的转换123456789101112/** * json字符串-简单对象型到JSONObject的转换 */@Testpublic void testJSONStrToJSONObject() &#123; JSONObject jsonObject = JSONObject.parseObject(JSON_OBJ_STR); System.out.println(\"studentName: \" + jsonObject.getString(\"studentName\") + \":\" + \" studentAge: \" + jsonObject.getInteger(\"studentAge\"));&#125; 12345678910111213141516/** * JSONObject到json字符串-简单对象型的转换 */@Testpublic void testJSONObjectToJSONStr() &#123; //已知JSONObject,目标要转换为json字符串 JSONObject jsonObject = JSONObject.parseObject(JSON_OBJ_STR); // 第一种方式 String jsonString = JSONObject.toJSONString(jsonObject); // 第二种方式 //String jsonString = jsonObject.toJSONString(); System.out.println(jsonString);&#125; json字符串(数组类型)与JSONArray之间的转换1234567891011121314151617181920212223242526272829303132333435363738394041/** * json字符串-数组类型到JSONArray的转换 */@Testpublic void testJSONStrToJSONArray() &#123; JSONArray jsonArray = JSONArray.parseArray(JSON_ARRAY_STR); //遍历方式1 int size = jsonArray.size(); for (int i = 0; i &lt; size; i++) &#123; JSONObject jsonObject = jsonArray.getJSONObject(i); System.out.println(\"studentName: \" + jsonObject.getString(\"studentName\") + \":\" + \" studentAge: \" + jsonObject.getInteger(\"studentAge\")); &#125; //遍历方式2 for (Object obj : jsonArray) &#123; JSONObject jsonObject = (JSONObject) obj; System.out.println(\"studentName: \" + jsonObject.getString(\"studentName\") + \":\" + \" studentAge: \" + jsonObject.getInteger(\"studentAge\")); &#125;&#125;/** * JSONArray到json字符串-数组类型的转换 */@Testpublic void testJSONArrayToJSONStr() &#123; //已知JSONArray,目标要转换为json字符串 JSONArray jsonArray = JSONArray.parseArray(JSON_ARRAY_STR); //第一种方式 String jsonString = JSONArray.toJSONString(jsonArray);// 第二种方式 //String jsonString = jsonArray.toJSONString(jsonArray); System.out.println(jsonString);&#125; 复杂json格式字符串与JSONObject之间的转换1234567891011121314/** * 复杂json格式字符串到JSONObject的转换 */@Testpublic void testComplexJSONStrToJSONObject() &#123; JSONObject jsonObject = JSONObject.parseObject(COMPLEX_JSON_STR); String teacherName = jsonObject.getString(\"teacherName\"); Integer teacherAge = jsonObject.getInteger(\"teacherAge\"); System.out.println(\"teacherName: \" + teacherName + \" teacherAge: \" + teacherAge); JSONObject jsonObjectcourse = jsonObject.getJSONObject(\"course\"); //获取JSONObject中的数据 123456789101112131415161718192021222324252627282930313233343536 String courseName = jsonObjectcourse.getString(\"courseName\"); Integer code = jsonObjectcourse.getInteger(\"code\"); System.out.println(\"courseName: \" + courseName + \" code: \" + code); JSONArray jsonArraystudents = jsonObject.getJSONArray(\"students\"); //遍历JSONArray for (Object object : jsonArraystudents) &#123; JSONObject jsonObjectone = (JSONObject) object; String studentName = jsonObjectone.getString(\"studentName\"); Integer studentAge = jsonObjectone.getInteger(\"studentAge\"); System.out.println(\"studentName: \" + studentName + \" studentAge: \" + studentAge); &#125;&#125;/** * 复杂JSONObject到json格式字符串的转换 */@Testpublic void testJSONObjectToComplexJSONStr() &#123; //复杂JSONObject,目标要转换为json字符串 JSONObject jsonObject = JSONObject.parseObject(COMPLEX_JSON_STR); //第一种方式 //String jsonString = JSONObject.toJSONString(jsonObject); //第二种方式 String jsonString = jsonObject.toJSONString(); System.out.println(jsonString);&#125; JSON格式字符串与javaBean之间的转换json字符串-简单对象型与javaBean之间的转换12345678910111213141516171819202122232425262728293031323334/** * json字符串-简单对象到JavaBean之间的转换 */@Testpublic void testJSONStrToJavaBeanObj() &#123; //第一种方式 JSONObject jsonObject = JSONObject.parseObject(JSON_OBJ_STR); String studentName = jsonObject.getString(\"studentName\"); Integer studentAge = jsonObject.getInteger(\"studentAge\"); //Student student = new Student(studentName, studentAge); //第二种方式,使用TypeReference&lt;T&gt;类,由于其构造方法使用protected进行修饰,故创建其子类 //Student student = JSONObject.parseObject(JSON_OBJ_STR, new TypeReference&lt;Student&gt;() &#123;&#125;); //第三种方式,使用Gson的思想 Student student = JSONObject.parseObject(JSON_OBJ_STR, Student.class); System.out.println(student);&#125;/** * JavaBean到json字符串-简单对象的转换 */@Testpublic void testJavaBeanObjToJSONStr() &#123; Student student = new Student(\"lily\", 12); String jsonString = JSONObject.toJSONString(student); System.out.println(jsonString);&#125; json字符串-数组类型与javaBean之间的转换1234567891011121314151617181920212223/** * json字符串-数组类型到JavaBean_List的转换 */@Testpublic void testJSONStrToJavaBeanList() &#123; //第一种方式 JSONArray jsonArray = JSONArray.parseArray(JSON_ARRAY_STR); //遍历JSONArray List&lt;Student&gt; students = new ArrayList&lt;Student&gt;(); Student student = null; for (Object object : jsonArray) &#123; JSONObject jsonObjectone = (JSONObject) object; String studentName = jsonObjectone.getString(\"studentName\"); Integer studentAge = jsonObjectone.getInteger(\"studentAge\"); student = new Student(studentName,studentAge); students.add(student); &#125; System.out.println(\"students: \" + students); 123456789 //第二种方式,使用TypeReference&lt;T&gt;类,由于其构造方法使用protected进行修饰,故创建其子类 List&lt;Student&gt; studentList = JSONArray.parseObject(JSON_ARRAY_STR, new TypeReference&lt;ArrayList&lt;Student&gt;&gt;() &#123;&#125;); System.out.println(\"studentList: \" + studentList); //第三种方式,使用Gson的思想 List&lt;Student&gt; studentList1 = JSONArray.parseArray(JSON_ARRAY_STR, Student.class); System.out.println(\"studentList1: \" + studentList1);&#125; 1234567891011121314151617/** * JavaBean_List到json字符串-数组类型的转换 */@Testpublic void testJavaBeanListToJSONStr() &#123; Student student = new Student(\"lily\", 12); Student studenttwo = new Student(\"lucy\", 15); List&lt;Student&gt; students = new ArrayList&lt;Student&gt;(); students.add(student); students.add(studenttwo); String jsonString = JSONArray.toJSONString(students); System.out.println(jsonString);&#125; 复杂json格式字符串与与javaBean之间的转换12345678910111213141516171819202122232425262728/** * 复杂json格式字符串到JavaBean_obj的转换 */@Testpublic void testComplexJSONStrToJavaBean()&#123; //第一种方式,使用TypeReference&lt;T&gt;类,由于其构造方法使用protected进行修饰,故创建其子类 Teacher teacher = JSONObject.parseObject(COMPLEX_JSON_STR, new TypeReference&lt;Teacher&gt;() &#123;&#125;); System.out.println(teacher); //第二种方式,使用Gson思想 Teacher teacher1 = JSONObject.parseObject(COMPLEX_JSON_STR, Teacher.class); System.out.println(teacher1);&#125;/** * 复杂JavaBean_obj到json格式字符串的转换 */@Testpublic void testJavaBeanToComplexJSONStr()&#123; //已知复杂JavaBean_obj Teacher teacher = JSONObject.parseObject(COMPLEX_JSON_STR, new TypeReference&lt;Teacher&gt;() &#123;&#125;); String jsonString = JSONObject.toJSONString(teacher); System.out.println(jsonString);&#125; javaBean与json对象间的之间的转换简单javaBean与json对象之间的转换123456789101112131415161718192021222324252627282930313233343536/** * 简单JavaBean_obj到json对象的转换 */@Testpublic void testJavaBeanToJSONObject()&#123; //已知简单JavaBean_obj Student student = new Student(\"lily\", 12); //方式一 String jsonString = JSONObject.toJSONString(student); JSONObject jsonObject = JSONObject.parseObject(jsonString); System.out.println(jsonObject); //方式二 JSONObject jsonObject1 = (JSONObject) JSONObject.toJSON(student); System.out.println(jsonObject1);&#125;/** * 简单json对象到JavaBean_obj的转换 */@Testpublic void testJSONObjectToJavaBean()&#123; //已知简单json对象 JSONObject jsonObject = JSONObject.parseObject(JSON_OBJ_STR); //第一种方式,使用TypeReference&lt;T&gt;类,由于其构造方法使用protected进行修饰,故创建其子类 Student student = JSONObject.parseObject(jsonObject.toJSONString(), new TypeReference&lt;Student&gt;() &#123;&#125;); System.out.println(student); //第二种方式,使用Gson的思想 Student student1 = JSONObject.parseObject(jsonObject.toJSONString(), Student.class); System.out.println(student1);&#125; JavaList与JsonArray之间的转换12345678910111213141516171819202122232425262728293031323334353637383940414243/** * JavaList到JsonArray的转换 */@Testpublic void testJavaListToJsonArray() &#123; //已知JavaList Student student = new Student(\"lily\", 12); Student studenttwo = new Student(\"lucy\", 15); List&lt;Student&gt; students = new ArrayList&lt;Student&gt;(); students.add(student); students.add(studenttwo); //方式一 String jsonString = JSONArray.toJSONString(students); JSONArray jsonArray = JSONArray.parseArray(jsonString); System.out.println(jsonArray); //方式二 JSONArray jsonArray1 = (JSONArray) JSONArray.toJSON(students); System.out.println(jsonArray1);&#125;/** * JsonArray到JavaList的转换 */@Testpublic void testJsonArrayToJavaList() &#123; //已知JsonArray JSONArray jsonArray = JSONArray.parseArray(JSON_ARRAY_STR); //第一种方式,使用TypeReference&lt;T&gt;类,由于其构造方法使用protected进行修饰,故创建其子类 ArrayList&lt;Student&gt; students = JSONArray.parseObject(jsonArray.toJSONString(), new TypeReference&lt;ArrayList&lt;Student&gt;&gt;() &#123;&#125;); System.out.println(students); //第二种方式,使用Gson的思想 List&lt;Student&gt; students1 = JSONArray.parseArray(jsonArray.toJSONString(), Student.class); System.out.println(students1);&#125; 复杂JavaBean_obj与json对象之间的转换123456789101112131415161718192021222324252627/** * 复杂JavaBean_obj到json对象的转换 */@Testpublic void testComplexJavaBeanToJSONObject() &#123; //已知复杂JavaBean_obj Student student = new Student(\"lily\", 12); Student studenttwo = new Student(\"lucy\", 15); List&lt;Student&gt; students = new ArrayList&lt;Student&gt;(); students.add(student); students.add(studenttwo); Course course = new Course(\"english\", 1270); Teacher teacher = new Teacher(\"crystall\", 27, course, students); //方式一 String jsonString = JSONObject.toJSONString(teacher); JSONObject jsonObject = JSONObject.parseObject(jsonString); System.out.println(jsonObject); //方式二 JSONObject jsonObject1 = (JSONObject) JSONObject.toJSON(teacher); System.out.println(jsonObject1);&#125; 123456789101112131415161718/** * 复杂json对象到JavaBean_obj的转换 */@Testpublic void testComplexJSONObjectToJavaBean() &#123; //已知复杂json对象 JSONObject jsonObject = JSONObject.parseObject(COMPLEX_JSON_STR); //第一种方式,使用TypeReference&lt;T&gt;类,由于其构造方法使用protected进行修饰,故创建其子类 Teacher teacher = JSONObject.parseObject(jsonObject.toJSONString(), new TypeReference&lt;Teacher&gt;() &#123;&#125;); System.out.println(teacher); //第二种方式,使用Gson的思想 Teacher teacher1 = JSONObject.parseObject(jsonObject.toJSONString(), Teacher.class); System.out.println(teacher1);&#125; 源码本篇博客的源码都在我的Github上,FastJsonDemo,欢迎大家Fork and Star! 总结好啦,FastJson的基本用法就介绍完了,送人玫瑰,手留余香,学习使我快乐,分享让大家快乐,欢迎大家点赞收藏噢!","categories":[{"name":"Java","slug":"Java","permalink":"https://zhouxu2016.github.io/categories/Java/"}],"tags":[{"name":"Json","slug":"Json","permalink":"https://zhouxu2016.github.io/tags/Json/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-11-03T06:57:13.240Z","updated":"2017-11-09T07:20:27.581Z","comments":true,"path":"2017/11/03/hello-world/","link":"","permalink":"https://zhouxu2016.github.io/2017/11/03/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"Study","slug":"Study","permalink":"https://zhouxu2016.github.io/categories/Study/"}],"tags":[{"name":"Study","slug":"Study","permalink":"https://zhouxu2016.github.io/tags/Study/"}]}]}